
environment:

    matrix:

    # For Python versions available on Appveyor, see
    # https://www.appveyor.com/docs/windows-images-software/#python
    
    - PYTHON_VERSION: 3.7
      PYTHON_DIR: "C:\\Python37-x64"
      MINICONDA: "C:\\Miniconda37-x64"
    
    PATH: "%MINICONDA%;%MINICONDA%\\Scripts;%PATH%"

install:
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # Apparently on AppVeyor the base image must be activated once:
  - cmd: activate
  - cmd: conda init cmd.exe

  - conda create -p ./env python=%PYTHON_VERSION%
  - cmd: activate ./env
  - conda install -c conda-forge -c davidcaron pclpy -y
  - tree env

build: off

test_script: 
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON_DIR% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  - "echo Skipping tests..." 

after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON_DIR% to get the correct
  # interpreter
  - "%PYTHON_DIR%\\python.exe setup.py bdist_wheel"

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.
